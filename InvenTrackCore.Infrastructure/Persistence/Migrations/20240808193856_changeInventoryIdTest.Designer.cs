// <auto-generated />
using System;
using InvenTrackCore.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InvenTrackCore.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240808193856_changeInventoryIdTest")]
    partial class changeInventoryIdTest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("DepartmentId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("EmployeeId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LocationId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("EquipmentTypeId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("InventoryId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Active")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(20, 2)
                        .HasColumnType("numeric(20,2)");

                    b.Property<string>("Series")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("LocationId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TicketId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedToId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<int>("DeliveredById")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("LocateId")
                        .HasColumnType("integer");

                    b.Property<int>("ReceivedById")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeliveredById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LocateId");

                    b.HasIndex("ReceivedById");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.TicketDetail", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("TicketId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("TicketDetails");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuditCreateUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditDeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditDeleteUser")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AuditUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AuditUpdateUser")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Employee", b =>
                {
                    b.HasOne("InvenTrackCore.Domain.Entities.Department", "Departments")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .IsRequired();

                    b.HasOne("InvenTrackCore.Domain.Entities.Location", "Locations")
                        .WithMany("Employees")
                        .HasForeignKey("LocationId")
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("InvenTrackCore.Domain.Entities.EquipmentType", "EquipmentTypes")
                        .WithMany("Inventories")
                        .HasForeignKey("EquipmentTypeId")
                        .IsRequired();

                    b.Navigation("EquipmentTypes");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("InvenTrackCore.Domain.Entities.Users", "Users")
                        .WithMany("Tickets")
                        .HasForeignKey("DeliveredById")
                        .IsRequired();

                    b.HasOne("InvenTrackCore.Domain.Entities.Department", "Departments")
                        .WithMany("Tickets")
                        .HasForeignKey("DepartmentId")
                        .IsRequired();

                    b.HasOne("InvenTrackCore.Domain.Entities.Location", "Locations")
                        .WithMany("Tickets")
                        .HasForeignKey("LocateId")
                        .IsRequired();

                    b.HasOne("InvenTrackCore.Domain.Entities.Employee", "Employees")
                        .WithMany("Tickets")
                        .HasForeignKey("ReceivedById")
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("Locations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.TicketDetail", b =>
                {
                    b.HasOne("InvenTrackCore.Domain.Entities.Inventory", "Inventories")
                        .WithMany("TicketDetails")
                        .HasForeignKey("InventoryId")
                        .IsRequired();

                    b.HasOne("InvenTrackCore.Domain.Entities.Ticket", "Tickets")
                        .WithMany("TicketDetails")
                        .HasForeignKey("TicketId")
                        .IsRequired();

                    b.Navigation("Inventories");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.EquipmentType", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Inventory", b =>
                {
                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Location", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("InvenTrackCore.Domain.Entities.Users", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
